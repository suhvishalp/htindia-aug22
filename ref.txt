Environment Setup 
    - JDK 11 later 
    - Eclipse / STS (spring tool suite 4) / Intelij Idea 
    - MySQL community edition 
    - AWS free tier account 
    - AWS CLI 2.x.x
    - AWS toolkit in STS / Eclipse 
    - Postman 

Language                    Library / Package                   Framework 

Java                        util, io, jdbc, lang                Spring 
                            gson

Python                      math                                Django / flask 

javascript

C# / VB                     //                                  .net framework 

Go 

Swift 


   |                        |                                       |
Programming             Simplifies the                      standaridize the process 
Capabilities            task 


Dependency Management tools 
    - maven 
    - gradle 






- Spring Framework 
    - Spring Core 
    - Spring Web 
    - Spring Data  
    - Spring REST 
    - Spring Security 
    - Spring Cloud

    - Pojo 
    - Java beans 
    - BO 
    - DAO 
    - DTO 
    - SO

    - 



    - IOC - Inversion of control 
        - the process of delegating the responsibility of creating the objects 
        - container in spring will be resposible to manage objects 

    - Spring Bean 
        - A bean is an object that is instantiated, assembled, and otherwise managed 
            by a Spring IoC container.


    - Bean Definition 
            - using xml configuration 

                <bean id="jdbcAccountRepoImpl" class="com.demo.dao.JdbcAccountRepositoryImpl">
                </bean>

                <bean id="" class="">
                    <property name="" value=" />
                </bean>

            - using java configuration 


                @Configuration
                public class MyConfiguration {

                    @Bean
                    public JdbcAccountRepositoryImpl getJdbcAccountRepositoryImpl(){
                        //code to construct an object of JdbcAccountRepositoryImpl

                        return new JdbcAccountRepositoryImpl-.-.-);
                    }

                    @Bean
                    public BasicDataSource getBasicDataSource(){
                        	BasicDataSource dataSource= new BasicDataSource();
                            dataSource.setUrl("jdbc:mysql://localhost/springdb");
                            dataSource.setUsername("root");
                            dataSource.setPassword("root");
                            dataSource.setDriverClassName("com.mysql.jdbc.Driver");

                            return dataSource;
                    }
                }
                    

            - using annotations 

                        @Component
                        public class JdbcAccountRepositoryImpl implements AccountRepository {
	
                                //...

                        }
https://github.com/suhvishalp/htindia-aug22


interface Talented {
    public abstract void sing();
}

class TalentedStudent implements Talented {

    public void sing(){
        //...
    }
}

Talented talented = new TalentedStudent();


Data Access 
----------------

    - JDBC 
    - ORM tools - Object Relational mapping 
        - Hibernate 
        - Ibatis
        - Toplink

        - Map the java object with a relational table 

        class Employee {
            //properties 
        }

    - JPA - Java Persistence API 
            - standard / specification for ORM Tool  

    - JPA Providers 
            - Hibernate JPA 
            - EclipseLink 
            - Mybatis


    - Entity 
            - the object which is managed / persisted by JPA Provider 

    - EntityManager 
            - object which performs persistence operations

    - JPQL 

    - Spring Data JPA 
        - Wrapper around JPA, JPA Provider (Hibernate) and provides "Repository" pattern 
            to perform persistence operation 


        JPA                 Hibernate JPA           Spring DATA JPA 

    @Component 

    @Service 

    @Repository

    @Controller 



Spring Data JPA 
    - offers repository pattern 

            interface Repository<T, ID>
                 |
                 |-->Marker interface, doesn't contain any method 
                 |
            interface CrudRepository<T, ID>
                |
                |--> long	count()
                |--> void	delete(T entity)
                |--> void	deleteAll()
                |--> <S extends T> S	save(S entity)
                |--> Iterable<T>	findAll()
                |--> Optional<T>	findById(ID id)
                |
                |
        interface PagingAndSortingRepository<T, ID>
                |
                |-> Page<T>	findAll(Pageable pageable)
                |-> Iterable<T>	findAll(Sort sort)
                |
                |
        interface JpaRepository<T, ID>
                |
                |--> List<T>	findAll(Sort sort) 
                |-->saveAll(Iterable<S> entities) 


   Fetch records using Spring data jpa 
    -----------------

        1. use the findById(), findAll() methods provided by Repository interface 

        2. use the query generation method 
            i.e. 
            List<Movie> findAllByDescription(String desc)
            List<Movie> findAllByPriceGreatherThan(int price)

        3. write custom query statements 

            //	@Query(value = "SELECT m FROM MOVIE m where m.price >= :price")
            //	List<Movie> getAllMoviesByPrice(@Param("price") int price);

                @Query(value = "SELECT * from movie where price >= :price", nativeQuery = true)
                List<Movie> getAllMoviesByPrice(@Param("price") int price);

        4. QueryDSL
            - https://www.baeldung.com/intro-to-querydsl
            - https://www.baeldung.com/querydsl-with-jpa-tutorial


https://225865359764.signin.aws.amazon.com/console



    1. create aws free tier account 
    2. create an IAM user account with "Administrator Access" policy 
    3. sign in with the IAM user 
    4. create a code commit repository 
    5. generate "HTTPS Git credentials for AWS CodeCommit"



State = Data 
Transfer = 


http method                URI Path                 Status Code             description 
GET                     /api/movies                 200                     get all movies 

GET                     /api/movies/{id}            200                     get the movie with the given id 
                        http://localhost:8080/api/movies/1

POST                    /api/movies                 201                     create a new movie 
                        request body
                         {
                             title : "xxxx",
                             description : "XXXXX",
                             price : XX
                         }

PUT                     /api/movies/{id}            200                     update movie with the latest data 
                        {
                             title : "xxxx",
                             description : "XXXXX",
                             price : XX
                         }

DELETE                  /api/movies/{id}            200                     delete the movie with given id 



ResponseEntity
-----------------
    - https://www.baeldung.com/spring-response-entity
    - ResponseEntity object is used to set the body,
         status, and headers to an HTTP response.

@ResponseStatus 
-----------------
    https://www.baeldung.com/spring-response-status

DTO 
-----
    https://www.baeldung.com/java-dto-pattern
    - DTOs or Data Transfer Objects are objects that carry data between processes in order to reduce the number of methods calls. 

DTO Mapper 
----------
    - https://www.baeldung.com/entity-to-and-from-dto-for-a-java-spring-application


Validation API / Hibernate validator 
-----------------
    - https://www.baeldung.com/spring-boot-bean-validation 


    Spring Cloud Config
    -----------------------
        - Centralize configuration 

    Spring Cloud Netflix
    ---------------------
        - 


        
EC2 - Elastic Compute Cloud 
--------------------------------
  - offeres virtualized hardware
  - create virtual machine 
      - 1. Choose AMI - Amazon machine image
            - tempalte for installing OS, software
            - An AMI is a template that contains the software configuration (operating system, application server, and applications) required to launch your instance. Search or Browse for AMIs if you donâ€™t see what you are looking for below'

      - 2. Choose Instance Type
              - Memory 
              - vCPUs
        3. choose Storage
        4. Create / Choose a Security group 
                SSH             22      0.0.0.0/0
                Custom TCP      8080    0.0.0.0.0

        5. Create / Choose Key Pair


Connect to the EC2 instance & install the appropriate run time 
------------------------------------------------------------------

    1. Install JRE 11 
    2. Install Tomcat 9 

https://techviewleo.com/install-tomcat-on-amazon-linux/


Deploy war file to EC2 manually 
------------------------------------
1. connect to EC2 
2. execute below commands 

        sudo su                         //swich to super user 
        cd /usr/share/tomcat/webapps    //navigate to root directory of tomcat 

        wget <<warfileurl>>


User Data Scripts 

Security Groups 
  - specify firewall rules for communication 


IAM User

IAM Roles

IAM Policy

Code Deploy 
--------------
        - pre-requisites 
                    1. Create a new Role for code-deploy service 
                            - go to IAM and create a new role for code-deploy

                    2. create a new role for EC2 instance  

                    3. create EC2 instance with below things installed 
                            a. jre 
                            b. tomcat 
                            c. codedeploy-agent
                                    - https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-linux.html

                                    wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
                            
                            d. attach the role to EC2 
                                    -> Select the Instance --> ACtion --> Security --> Modify IAM Role 


            Configure Code Deploy Project 
            ------------------------------
                - Create a new Application 
                - Create a new Deployment Group 


Code Pipeline 


Load Balancer 
Auto Scaling 


1. Docker
        a. docker compose 

2. Spring Cloud 
    - Spring Cloud Config Server        - Centralized configuration 
    - Spring Cloud Netflix Eureka       - Service discovery & Service Registry 
                                            - etcd 
                                            - consul 
    - openfeign / communication between microservices 

3. Data JPA - Relationships / inheritance / transaction management 

4. REST - Relationships / Secure api endpoints / custom headers / consuming other REST services 
            Swagger 

5. Spring Security 

6. ECS - Elastic container service 

        - all 5 docker images
        - push all the 5 images to docker hub 
        - 




"https://www.linkedin.com/learning/paths/become-a-spring-developer?u=2146730
https://www.linkedin.com/learning/aws-essential-training-for-developers
https://www.linkedin.com/learning/microservices-foundations
"

            - Docker 
                - it is a tool that offers Containerization

            - Docker Image 
                - Self executable package containing your code, dependencies, library, runtime
                         & tools inside a single unit 

            - once a docker image is created, we can store it to any repository 
                    i.e. dockerhub 
                         AWS Container Registry 

            - Container 
                - instance of a docker image that executes the application in an isolated env. 


            1. how to package a spring boot application into docker image (JAR / WAR)
                    - a. using Dockerfile 
                            - compile the project manually 
                            - execute the .jar file manually 
                                    > java -jar accounts-0.0.1-SNAPSHOT.jar

                            > build docker image 
                                > docker build -t visbank/accounts .

                    - b. using buildpacks / packeto
                    - c. using codebuild 


            2. how to push the docker image to repository i.e. dockerhub / AWS container registry   
            3. how to run a container 


            ECS 
                - Cluster 
                     - a cluster is a logical group of EC2 machines or Tasks 

                - Task Definition 
                        - Image 
                        - Port Mapping 
                        - Env variables 
                        - 
                        - Task definitions specify the container information for your application, 
                            such as how many containers are part of your task, 
                            what resources they will use,
                             how they are linked together, and which host ports they will use.

                - Service 
                    - specificy how the tasks should run 
                    - A service allows you to run and maintain a specified number (the "desired count") of 
                        simultaneous instances of a task definition in an ECS cluster.
                


            - Push docker images to ECR 
            --------------------------------
              1. login / authenticate  
              
                aws ecr get-login-password | docker login --username AWS --password-stdin 225865359764.dkr.ecr.us-east-1.amazonaws.com

                docker tag <<local-image-name>>  <<ECR-Repo-URL>>:<<TAG>>
                docker tag visbank/configserver   225865359764.dkr.ecr.us-east-1.amazonaws.com/visbank:configserver
                docker tag visbank/eurekaserver   225865359764.dkr.ecr.us-east-1.amazonaws.com/visbank:eurekaserver

                docker push <<ECR-REPO-URL>>:<<TAG>>
                docker push  225865359764.dkr.ecr.us-east-1.amazonaws.com/visbank:configserver
                docker push  225865359764.dkr.ecr.us-east-1.amazonaws.com/visbank:eurekaserver


â€“


JPA relationships 
---------------------

        @OneToOne                       - Join-column       EAGER 
        @ManyToOne                      - join-column                    EAGER 


        @`OneToMany`                      - Join_Table            LAZY 
        @ManyToManyÂ                      - Join_Table           LAZY


        A   ---->   B


        Dep                     Emp 


Making microservices Resilient / Fault Tolerent
------------------------------------------------
      Netflix Hystrix                 --> Resilience4j 


      - Circuit Breaker : used to stop making requests when a service is down / failing
      - fallback        : alternative path to failing requests 
      - Retry           : used to make retries when a service is temporarily down 
      - Ratelimit       : limit the number of calls / requests that a service can handle 
      - bulkhead        : limit the number of outgoing concurrent requests to a service to avoid overloading 
      
         

    - accounts      ---> /getCustomerDetails

            |-->accountdb
            |------> loans ---> loansdb
            |------> cards ---> cardsdb 


            Netflix Ribbon                  --> Spring Cloud Load Balancer 

            Netflix Hystrix                 --> Resilience4j 

            Zuul API Gateway                --> Spring Cloud Gateway 

            Netflix Eureka                  --> spring cloud Eureka 



            1. add below dependencies to pom.xml (accounts service) 

                    	<dependency>
                            <groupId>org.springframework.cloud</groupId>
                            <artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-starter-aop</artifactId>
                            <version>2.7.2</version>
                        </dependency>


            2. add the @CircuitBreaker to the apiend point you want to implement the circuit breaking pattern 


                @CircuitBreaker(name="customerDetailsInAccountsService")
                    public CustomerDetails myCustomerDetails(@RequestBody Customer customer) {
                    

            3. configure threshold / add below properties in application.properties files 

                    resilience4j.circuitbreaker.configs.defaults.register-health-indicator=true
                    resilience4j.circuitbreaker.instances.customerDetailsInAccountsService.minimumNumberOfCalls=5
                    resilience4j.circuitbreaker.instances.customerDetailsInAccountsService.failure-rate-threshold=50
                    resilience4j.circuitbreaker.instances.customerDetailsInAccountsService.wait-duration-in-open-state=30000
                    resilience4j.circuitbreaker.instances.customerDetailsInAccountsService.permitted-number-of-calls-in-half-open-state=2




    ECS Code Pipeline 
    -----------------------

            - bank application 
                1. config-server 
                2. eureka-server 
                3. accounts 
                4. loans
                5. cards 


            pre-requisites  
            -----------------
                    - Create an ECR Repository 
                    - Create a cluster 
                    - Create a SecurityGroup to allow communication on appropriate port / source 
                    - define appropriate permissions for the CodeBuildServiceRole to perform tasks related to ECR 

            Steps 
            ------
              A. Create a Code Commit repo and push your code along with appropriate configuration 
                    i.e. buildspec.yml 

              B. Create a CodeBuild project with appropriate ServiceRole to perform
                        **sevice role name : codebuild-bank-config-server-build-project-service-role
                                                - edit this role and assign below permissions 
                                                
                        **the source code must have appropriate "buildspec.yml" file 

                    1. compile the project              ---                     // mvn install 
                    2. build the docker image           ---                     // mvn spring-boot:build-image 
                    3. push the docker image to ECR     ---                     // login to aws ecr via aws cli --> tag command --> push command 
                    
              C. Create a cluster and an initial task defination 

              D. Create a Code Pipeline to automate the deployment 

                    4. Create a task definition 
                            --> containername -- imagename 


                REF : https://docs.aws.amazon.com/codepipeline/latest/userguide/ecs-cd-pipeline.html


OAuth2 / SAML / OpenID Connect 


 OAuth2 Framework 
    - standard / specifiation for implement security in applications 

 OAuth2 Implementations / Providers 
    - KeyClock 
    - OKTA 
    - AWS Cognito 
    - Azure AD 
    - 

OAuth2 Grant Flow types 
--------------------------
    - REF : https://oauth.net/2/grant-types/

    - Client Credential Grant Flow
            - The Client Credentials grant type is used by clients to obtain an access token outside of the context of a user.
            - This is typically used by clients to access resources about themselves rather than to access a user's resources. 

    - Authorization Grant Flow 


    1. setup / start authorization server i.e. keyclock server 

          a. run keyclock server 
                  docker run -p 7080:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:19.0.1 start-dev
          b. login to localhost:7080 keyclock server with username - admin password - admin 
          c. create a Realm - MyRealm 
          d. create a new client 
                - ClientID 
                - Client authentication : ON 
                - Standard flow : ON 
                - Direct access grants : ON 
                - Service Account Roles : ON 

          e. note the client-secret from "Credentials" tab

                        client_id = "easybank-callcenter"
                        client_secret   = "82IjeV5nQ44Jd8aexv95f2gEUrbJq7i4"
                        scope           = openid
                        grant_type      = client_credentials

          f. observe the endpoints exposed by keyclock auth server 

               http://localhost:7080/realms/MyRealm/.well-known/openid-configuration

        "token_endpoint": "http://localhost:7080/realms/MyRealm/protocol/openid-connect/token",


  API_Gateway Implmentation for Security 
  ------------------------------------------
    1. add below dependencies 
            	<dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
                </dependency>
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-security</artifactId>
                </dependency>
                <dependency>
                <dependency>
                    <groupId>org.springframework.security</groupId>
                    <artifactId>spring-security-oauth2-client</artifactId>
                </dependency>
                <dependency>
                    <groupId>org.springframework.security</groupId>
                    <artifactId>spring-security-oauth2-jose</artifactId>
                </dependency>




    1. Spring boot, actuator
    2. Spring DATA JPA, REST API 
    3. Config Server & Eureka Server 
    4. Making microservices resilient 
    5. Docker, Docker Compose
    6. AWS CICD - CodeCommit, CodeBuild, CodePipeline 
    7. AWS ECS, Containerization 
    8. API Gateway & Security 