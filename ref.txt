Environment Setup 
    - JDK 11 later 
    - Eclipse / STS (spring tool suite 4) / Intelij Idea 
    - MySQL community edition 
    - AWS free tier account 
    - AWS CLI 2.x.x
    - AWS toolkit in STS / Eclipse 
    - Postman 

Language                    Library / Package                   Framework 

Java                        util, io, jdbc, lang                Spring 
                            gson

Python                      math                                Django / flask 

javascript

C# / VB                     //                                  .net framework 

Go 

Swift 


   |                        |                                       |
Programming             Simplifies the                      standaridize the process 
Capabilities            task 


Dependency Management tools 
    - maven 
    - gradle 






- Spring Framework 
    - Spring Core 
    - Spring Web 
    - Spring Data  
    - Spring REST 
    - Spring Security 
    - Spring Cloud

    - Pojo 
    - Java beans 
    - BO 
    - DAO 
    - DTO 
    - SO

    - 



    - IOC - Inversion of control 
        - the process of delegating the responsibility of creating the objects 
        - container in spring will be resposible to manage objects 

    - Spring Bean 
        - A bean is an object that is instantiated, assembled, and otherwise managed 
            by a Spring IoC container.


    - Bean Definition 
            - using xml configuration 

                <bean id="jdbcAccountRepoImpl" class="com.demo.dao.JdbcAccountRepositoryImpl">
                </bean>

                <bean id="" class="">
                    <property name="" value=" />
                </bean>

            - using java configuration 


                @Configuration
                public class MyConfiguration {

                    @Bean
                    public JdbcAccountRepositoryImpl getJdbcAccountRepositoryImpl(){
                        //code to construct an object of JdbcAccountRepositoryImpl

                        return new JdbcAccountRepositoryImpl-.-.-);
                    }

                    @Bean
                    public BasicDataSource getBasicDataSource(){
                        	BasicDataSource dataSource= new BasicDataSource();
                            dataSource.setUrl("jdbc:mysql://localhost/springdb");
                            dataSource.setUsername("root");
                            dataSource.setPassword("root");
                            dataSource.setDriverClassName("com.mysql.jdbc.Driver");

                            return dataSource;
                    }
                }
                    

            - using annotations 

                        @Component
                        public class JdbcAccountRepositoryImpl implements AccountRepository {
	
                                //...

                        }
https://github.com/suhvishalp/htindia-aug22


interface Talented {
    public abstract void sing();
}

class TalentedStudent implements Talented {

    public void sing(){
        //...
    }
}

Talented talented = new TalentedStudent();


Data Access 
----------------

    - JDBC 
    - ORM tools - Object Relational mapping 
        - Hibernate 
        - Ibatis
        - Toplink

        - Map the java object with a relational table 

        class Employee {
            //properties 
        }

    - JPA - Java Persistence API 
            - standard / specification for ORM Tool  

    - JPA Providers 
            - Hibernate JPA 
            - EclipseLink 
            - Mybatis


    - Entity 
            - the object which is managed / persisted by JPA Provider 

    - EntityManager 
            - object which performs persistence operations

    - JPQL 

    - Spring Data JPA 
        - Wrapper around JPA, JPA Provider (Hibernate) and provides "Repository" pattern 
            to perform persistence operation 


        JPA                 Hibernate JPA           Spring DATA JPA 

    @Component 

    @Service 

    @Repository

    @Controller 



Spring Data JPA 
    - offers repository pattern 

            interface Repository<T, ID>
                 |
                 |-->Marker interface, doesn't contain any method 
                 |
            interface CrudRepository<T, ID>
                |
                |--> long	count()
                |--> void	delete(T entity)
                |--> void	deleteAll()
                |--> <S extends T> S	save(S entity)
                |--> Iterable<T>	findAll()
                |--> Optional<T>	findById(ID id)
                |
                |
        interface PagingAndSortingRepository<T, ID>
                |
                |-> Page<T>	findAll(Pageable pageable)
                |-> Iterable<T>	findAll(Sort sort)
                |
                |
        interface JpaRepository<T, ID>
                |
                |--> List<T>	findAll(Sort sort) 
                |-->saveAll(Iterable<S> entities) 


   Fetch records using Spring data jpa 
    -----------------

        1. use the findById(), findAll() methods provided by Repository interface 

        2. use the query generation method 
            i.e. 
            List<Movie> findAllByDescription(String desc)
            List<Movie> findAllByPriceGreatherThan(int price)

        3. write custom query statements 

            //	@Query(value = "SELECT m FROM MOVIE m where m.price >= :price")
            //	List<Movie> getAllMoviesByPrice(@Param("price") int price);

                @Query(value = "SELECT * from movie where price >= :price", nativeQuery = true)
                List<Movie> getAllMoviesByPrice(@Param("price") int price);

        4. QueryDSL
            - https://www.baeldung.com/intro-to-querydsl
            - https://www.baeldung.com/querydsl-with-jpa-tutorial


https://225865359764.signin.aws.amazon.com/console



    1. create aws free tier account 
    2. create an IAM user account with "Administrator Access" policy 
    3. sign in with the IAM user 
    4. create a code commit repository 
    5. generate "HTTPS Git credentials for AWS CodeCommit"



State = Data 
Transfer = 


http method                URI Path                 Status Code             description 
GET                     /api/movies                 200                     get all movies 

GET                     /api/movies/{id}            200                     get the movie with the given id 
                        http://localhost:8080/api/movies/1

POST                    /api/movies                 201                     create a new movie 
                        request body
                         {
                             title : "xxxx",
                             description : "XXXXX",
                             price : XX
                         }

PUT                     /api/movies/{id}            200                     update movie with the latest data 
                        {
                             title : "xxxx",
                             description : "XXXXX",
                             price : XX
                         }

DELETE                  /api/movies/{id}            200                     delete the movie with given id 



ResponseEntity
-----------------
    - https://www.baeldung.com/spring-response-entity
    - ResponseEntity object is used to set the body,
         status, and headers to an HTTP response.

@ResponseStatus 
-----------------
    https://www.baeldung.com/spring-response-status

DTO 
-----
    https://www.baeldung.com/java-dto-pattern
    - DTOs or Data Transfer Objects are objects that carry data between processes in order to reduce the number of methods calls. 

DTO Mapper 
----------
    - https://www.baeldung.com/entity-to-and-from-dto-for-a-java-spring-application


Validation API / Hibernate validator 
-----------------
    - https://www.baeldung.com/spring-boot-bean-validation 


    Spring Cloud Config
    -----------------------
        - Centralize configuration 

    Spring Cloud Netflix
    ---------------------
        - 


        
EC2 - Elastic Compute Cloud 
--------------------------------
  - offeres virtualized hardware
  - create virtual machine 
      - 1. Choose AMI - Amazon machine image
            - tempalte for installing OS, software
            - An AMI is a template that contains the software configuration (operating system, application server, and applications) required to launch your instance. Search or Browse for AMIs if you donâ€™t see what you are looking for below'

      - 2. Choose Instance Type
              - Memory 
              - vCPUs
        3. choose Storage
        4. Create / Choose a Security group 
                SSH             22      0.0.0.0/0
                Custom TCP      8080    0.0.0.0.0

        5. Create / Choose Key Pair


Connect to the EC2 instance & install the appropriate run time 
------------------------------------------------------------------

    1. Install JRE 11 
    2. Install Tomcat 9 

https://techviewleo.com/install-tomcat-on-amazon-linux/


Deploy war file to EC2 manually 
------------------------------------
1. connect to EC2 
2. execute below commands 

        sudo su                         //swich to super user 
        cd /usr/share/tomcat/webapps    //navigate to root directory of tomcat 

        wget <<warfileurl>>


User Data Scripts 

Security Groups 
  - specify firewall rules for communication 


IAM User

IAM Roles

IAM Policy

Code Deploy 
--------------
        - pre-requisites 
                    1. Create a new Role for code-deploy service 
                            - go to IAM and create a new role for code-deploy

                    2. create a new role for EC2 instance  

                    3. create EC2 instance with below things installed 
                            a. jre 
                            b. tomcat 
                            c. codedeploy-agent
                                    - https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-linux.html

                                    wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
                            
                            d. attach the role to EC2 
                                    -> Select the Instance --> ACtion --> Security --> Modify IAM Role 


            Configure Code Deploy Project 
            ------------------------------
                - Create a new Application 
                - Create a new Deployment Group 


Code Pipeline 


Load Balancer 
Auto Scaling 


1. Docker

        a. docker compose 



2. Spring Cloud 
    - Config Server 
    - Eureka 
    - openfeign / communication between microservices 

3. Data JPA - Relationships / inheritance / transaction management 

4. REST - Relationships / Secure api endpoints / custom headers / consuming other REST services 
            Swagger 

5. Spring Security 

6. ECS 





"https://www.linkedin.com/learning/paths/become-a-spring-developer?u=2146730
https://www.linkedin.com/learning/aws-essential-training-for-developers
https://www.linkedin.com/learning/microservices-foundations
"



